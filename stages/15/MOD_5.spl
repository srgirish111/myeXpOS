//breakpoint;
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush(BP);
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//breakpoint;

if( [process_table_entry + 4] == RUNNING ) then
    [process_table_entry + 4] = READY;
endif ;

//breakpoint;

alias new R2;
new=currentPID+1;
while( new != currentPID ) do
    if( [PROCESS_TABLE  + 16*new +4] == CREATED || [PROCESS_TABLE + 16*new + 4]  == READY) then
        break;
    endif ;
    new  =new +1;
    if(new == MAX_PROC_NUM) then
        new = 1;
    endif;
endwhile ;

//breakpoint;


alias newPID R3;

if( new == currentPID ) then
    newPID  =0;
else
    newPID=new;
endif ;

//breakpoint;

alias new_process_table R4;

new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel sp, ptbr , ptlr
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] =newPID ;

if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    [new_process_table + 9] =0 ;
    ireturn;
endif;


[new_process_table + 4] = RUNNING;
[new_process_table + 9] = 0;

multipop(BP);

return;











