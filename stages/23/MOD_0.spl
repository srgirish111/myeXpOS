alias functionNum R1;
alias currentPID R2;

// Acquire Disk
if(functionNum == 3) then
	while([DISK_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
		multipush(R1, R2);
		call MOD_5;
		multipop(R1, R2);
	endwhile;
	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
endif;


//Acquire Inode
if(functionNum == 4) then
  alias inodeIndex R2;
  alias currPID R3;
  
  alias procTab R4;
  procTab = PROCESS_TABLE + currPID*16;

  while([FILE_STATUS_TABLE + 4*inodeIndex] != -1) do
     [procTab + 4] = WAIT_FILE;
     [procTab + 5] = inodeIndex;
     multipush(R1, R2, R3, R4);
     call MOD_5;
     multipop(R1, R2, R3, R4);
  endwhile;
  
  if([INODE_TABLE + inodeIndex*16 + 1] == -1) then
    R0 = -1;
    return;
  endif;
  
  [FILE_STATUS_TABLE + 4*inodeIndex] = currPID;
  R0 = 0;
  return;
endif;

//Release Inode
if(functionNum == 5) then
  alias inodeIndex R2;
  alias currPID R3;

  if( currPID != [FILE_STATUS_TABLE + 4*inodeIndex]) then
    R0 = -1;
    return;
  endif;
  
  [FILE_STATUS_TABLE + 4*inodeIndex] = -1;

  alias i R4;
  i = 1;
  alias procTab R5;
  while(i<16) do
    procTab = PROCESS_TABLE + 16*i;
    if([procTab + 4] == WAIT_FILE && [procTab + 5] == inodeIndex) then
      [procTab + 4] = READY;
      [procTab + 5] = -1;
    endif;
  endwhile;
  R0 = 0;
  return;
endif;


//AcquireSemaphore
if(functionNum == 6) then
  alias i R3;
  i = 0;
  while([SEMAPHORE_TABLE + 4*i + 1] != 0) do
    i = i + 1;
  endwhile;
  if(i==32) then
    R0 = -1;
    return;
  endif;
  [SEMAPHORE_TABLE + 4*i + 1] = 1;
  [SEMAPHORE_TABLE + 4*i] = -1;
  R0 = i;
  return;
endif;

//Release Semaphore
if(functionNum == 7) then
  if([SEMAPHORE_TABLE + 4*R2] == R3) then
    [SEMAPHORE_TABLE + 4*R2] = -1;
    alias i R4;
    i=1;
    while(i<16) do
      alias procTab R5;
      procTab = PROCESS_TABLE + 16*i;
      if([procTab + 4] == WAIT_SEMAPHORE && [procTab + 5] == R2) then
        [procTab + 4] = READY;
        [procTab + 5] = -1;
      endif;
      i = i + 1;
    endwhile;
  endif;
  [SEMAPHORE_TABLE + 4*R2 + 1] = [SEMAPHORE_TABLE + 4*R2 + 1] -1;
  R0 = 0;
  return;
endif;




// Acquire Terminal :
if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE+0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call MOD_5;
		multipop(R1, R2);
	endwhile;
	
	[TERMINAL_STATUS_TABLE + 0] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	breakpoint;
	return;
endif;

// Release Terminal
if(functionNum == 9) then
	if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		alias retVal R0;
		retVal = -1;
		return;

	else
		[TERMINAL_STATUS_TABLE + 0] = 0;
		alias i R3;
		i = 0;
		while(i<16) do
			alias pid R4;
			pid = [PROCESS_TABLE + 16*i + 1];
			if( pid>0 && pid<16) then
				if([PROCESS_TABLE + 16*i + 4] == WAIT_TERMINAL) then
					[PROCESS_TABLE + 16*i + 4] = READY;
				endif;
			endif;
			i = i + 1;
		endwhile;
		alias retVal R0;
		retVal = 0;
		breakpoint;
		return;
	endif;
else
alias retVal R0;
retVal = -1;
return;
endif;