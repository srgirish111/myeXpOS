//load exception handler routine from disk to memory
loadi(2, 15);
loadi(3, 16);

//load timer interrupt
loadi(4,17);
loadi(5,18);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load INT 4
loadi(10,23);
loadi(11,24);

//load INT5
loadi(12,25);
loadi(13,26);

//load INT 6
loadi(14,27);
loadi(15,28);

//load INT7 
loadi(16,29);
loadi(17,30);

//load INT8
loadi(18,31);
loadi(19,32);

//load INT9
loadi(20,33);
loadi(21,34);

//load INT 10 module from disk to memory
loadi(22,35);
loadi(23,36);

//load INT11
loadi(24,37);
loadi(25,38);

//load INT13
loadi(28,41);
loadi(29,42);

//load INT14
loadi(30,43);
loadi(31,44);

//load INT15
loadi(32,45);
loadi(33,46);

//load the library code
loadi(63,13);
loadi(64,14);

//load MOD 0
loadi(40,53);
loadi(41,54);

//load MOD1
loadi(42,55);
loadi(43,56);

//load MOD2
loadi(44,57);
loadi(45,58);

//load MOD3
loadi(46,59);
loadi(47,60);

//load MOD 4
loadi(48,61);
loadi(49,62);

//load the MOD 5
loadi(50,63);
loadi(51,64);

//load inode table
loadi(59,3);
loadi(60,4);

//load disk free list
loadi(61,2);

//load root file
loadi(62,5);

//load the init program
loadi(65,7);
loadi(66,8);







[TERMINAL_STATUS_TABLE] = 0;


//---------------------------------- INIT PROGRAM --------------------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

alias ProcessTableEntry R1;
ProcessTableEntry = PROCESS_TABLE + 16;

//Adding data to process table
[ProcessTableEntry + 11] = 80; //Set the user area page physical address to 80
[ProcessTableEntry + 1] = 1; // First process, so set the PID to 1
[ProcessTableEntry + 3] = 1; // Setting the userid to ROOT
[ProcessTableEntry + 4] = CREATED;
[ProcessTableEntry + 13] = 8*512;
[ProcessTableEntry + 12] = 0;
[ProcessTableEntry + 14] = PTBR;
[ProcessTableEntry + 15] = PTLR;

//setting up the logical pages to link to physical address

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Setting top of stack to the second word in header
[76*512] = [65*512 + 1];



//----------------------------- SETTING ALL OTHER PROCESS STATUS TO TERMINATED --------------
alias iter R1;
iter = 2;

while(iter < 16) do
	[PROCESS_TABLE + 16*iter + 4] = TERMINATED;
	iter = iter + 1;
endwhile;


iter = 0;
while(iter < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + iter*4] = -1;
	[FILE_STATUS_TABLE + iter*4 + 1] = -1;
	iter = iter + 1;
endwhile;

iter = 0;
while(iter<MAX_BUFFER) do
	[BUFFER_TABLE + iter*4] = -1;
	[BUFFER_TABLE + iter*4 + 1] = 0;
	[BUFFER_TABLE + iter*4 + 2] = -1;
	iter = iter + 1;
endwhile;


//--------------------------- INITIALIZAING SOME VARIABLES ----------------------------------

iter = 0;
while(iter < 83) do
	[MEMORY_FREE_LIST + iter] = 1;
	iter = iter + 1;
endwhile;

while(iter < 128) do
	[MEMORY_FREE_LIST + iter] = 0;
	iter = iter + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 45;
[DISK_STATUS_TABLE + 0] = 0;

[DISK_MAP_TABLE + 10] = -1;
[DISK_MAP_TABLE + 11] = -1;
[DISK_MAP_TABLE + 12] = -1;
[DISK_MAP_TABLE + 13] = -1;
[DISK_MAP_TABLE + 14] = 7;
[DISK_MAP_TABLE + 15] = 8;
[DISK_MAP_TABLE + 16] = -1;
[DISK_MAP_TABLE + 17] = -1;
[DISK_MAP_TABLE + 18] = -1;
[DISK_MAP_TABLE + 19] = -1;


iter = 0;
while(iter < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + iter*4] = -1;
	[SEMAPHORE_TABLE + iter*4 + 1] = 0;
	iter = iter + 1;
endwhile;

iter = 0;
while(iter < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + iter*4] = -1;
	[OPEN_FILE_TABLE + iter*4 + 1] = 0;
	iter = iter + 1;
endwhile;

//-------------------------------------------------------------------------------------
iter = 0;
while(iter < 16) do
	[(80 * 512) + 496 + iter] = -1;
	iter = iter + 1;
endwhile;
//-------------------------------------------------------------------------------------

return;
