//print "INT5";

alias syscallNum R1;
alias pte R2;
alias userSp R3;
alias ptbr R4;
alias retAddr R5;


//process-table entry
pte = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
ptbr = [pte + 14];

//switching to kernel stack
userSp = SP;
[pte + 13] = SP;
SP = [pte + 11] * 512 - 1;

//getting the syscall Num
syscallNum = [[ptbr + 2*((userSp - 5)/512)] * 512 + (userSp - 5)%512]; 
 

//saving the retAddr in a register
retAddr = [ptbr + 2*((userSp - 1)/512)] * 512 + (userSp - 1)%512;

//open
if(syscallNum == 2) then

	alias fileName R6;
	fileName = [[ptbr + 2*((userSp - 4)/512)] * 512 + (userSp - 4)%512];
	
	
	alias iter R7;

	//Setting mode flag to 2
	[pte + 9] = 2;
	
	//getting a free entry from per-process resource table
	iter = 0;
	while(iter < 8) do
		if([([pte + 11] * 512) + 496 + 2*iter] == -1) then
			break;
		endif;
		iter = iter + 1;
	endwhile;
	
	//if no free entry exists case
	if(iter == 8) then
		[retAddr] = -3;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;
	
	//calling open
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 3;
	R2 = fileName;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
	//return error code if its an error
	if(R0 < 0) then
		[retAddr] = R0;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;
	
	//setting per-process resource table entries
	[([pte + 11] * 512) + 496 + 2*iter] = FILE;
	[([pte + 11] * 512) + 496 + 2*iter + 1] = R0;
	
	
	[retAddr] = R0;
	[pte + 9] = 0;
	SP = [pte + 13];
	ireturn;
	
	
	
endif;

//close
if(syscallNum == 3) then

	alias fileDesc R6;
	fileDesc = [[ptbr + 2*((userSp - 4)/512)] * 512 + (userSp - 4)%512];
	
	//change the mode flag
	[pte + 9] = 3;
	
	//invalid file descriptor
	if(fileDesc < 0 || fileDesc > 7) then
		[retAddr] = -1;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;
	
	//invalid per-process resource table entry
	if([([pte + 11] * 512) + 496 + 2*fileDesc] == -1 || [([pte + 11] * 512) + 496 + 2*fileDesc] != FILE) then
		[retAddr] = -1;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;
	
	//get open file table index
	alias open_ft_index R7;
	open_ft_index = [([pte + 11] * 512) + 496 + 2*fileDesc + 1];
	
	//close - file manager module
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 =open_ft_index ;
	R3 =[SYSTEM_STATUS_TABLE + 1] ;
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
	//invalidate per-process resource table entry
	[([pte + 11] * 512) + 496 + 2*fileDesc] = -1;
	[([pte + 11] * 512) + 496 + 2*fileDesc + 1] = -1;
	
	[retAddr] = 0;
	[pte + 9] = 0;
	SP = [pte + 13];
	ireturn;
	
endif;
