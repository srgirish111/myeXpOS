alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;
alias physicalPageNum R1;
alias offset R2;
alias filenamePHYaddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
filenamePHYaddr = (physicalPageNum * 512) + offset;
alias filename R4;
filename=[filenamePHYaddr];

alias flag R12;
alias counter R11;
alias inode_entry R8;
alias inode_index R9;
alias userareapage R10; 
userareapage =[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] ;
counter =0;
flag=0;
inode_entry =INODE_TABLE;

while( counter < MAX_FILE_NUM ) do
   if([inode_entry+1]==filename) then
        flag =1;
        inode_index = counter;
   endif ;
   inode_entry = inode_entry +16;
   counter = counter +1;
endwhile ;



if( flag ==0 ) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
    alias physicalAddrRetVal R6;
	  physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	  [physicalAddrRetVal] = -1;
    ireturn;
endif ;

//print(inode_index);
multipush(R8,R9,R10);
R1=EXIT_PROCESS;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
multipop(R8,R9,R10);


[MEMORY_FREE_LIST + userareapage] = [MEMORY_FREE_LIST + userareapage]+1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1 ;//memfree
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias pre_proc_table R4;
pre_proc_table =([PROCESS_TABLE +[SYSTEM_STATUS_TABLE + 1]*16 +11]*512) +512 - 16;


counter =0;
while( counter < 16 ) do
    [pre_proc_table +counter] =-1;
    [pre_proc_table +counter+1] =-1;
    counter =counter+2;
endwhile ;

[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 + 4] =RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 7] =inode_index;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//breakpoint;
//multipush(R8,R9,R10,R11);
//R1 = GET_FREE_PAGE;
//call MOD_2;
[PTBR+ 4] = -1;
[PTBR+ 5] ="0000";
//multipop(R8,R9,R10,R11);
//breakpoint;

//multipush(R8,R9,R10,R11);
//R1 = GET_FREE_PAGE;
//call MOD_2;
[PTBR+ 6] = -1;
[PTBR+ 7] ="0000";
//multipop(R8,R9,R10,R11);


multipush(R8,R9,R10,R11);
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+ 16] = R0;
[PTBR+ 17] ="0110";
multipop(R8,R9,R10,R11);

multipush(R8,R9,R10,R11);
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+ 18] = R0;
[PTBR+ 19] ="0110";
multipop(R8,R9,R10,R11);


alias inodeentry R12;
inodeentry = INODE_TABLE+ [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 +7]*16 ;
counter= 0 ;


//breakpoint;
multipush(R8,R9,R10,R11,R12);
R1 = GET_CODE_PAGE;
R2=[inodeentry+8];
call MEMORY_MANAGER;
multipop(R8,R9,R10,R11,R12);


[PTBR+ 8 ]= R0;
[PTBR+ 9]="0100";
//breakpoint;
alias pre R5;
pre= DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10;
pre =pre+2; //unsed + heap
counter =0;
while( counter <8 ) do
    [pre+counter] =-1;
    counter = counter+1;
endwhile ;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]* 10 + 4] = [inodeentry + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]* 10 + 5] = [inodeentry + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]* 10 + 6] = [inodeentry + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]* 10 + 7] = [inodeentry + 11];

//breakpoint;
//multipush(R8,R9,R10,R11,R12);
//R1=DISK_LOAD;
//R2=[SYSTEM_STATUS_TABLE+1];
//R3= R0;
//R4=[inodeentry+ 8];
//call MOD_4;
//multipop(R8,R9,R10,R11,R12);
//breakpoint;
//counter =counter +1;
//endwhile;


[PROCESS_TABLE + 13+[SYSTEM_STATUS_TABLE+1]*16] =8*512;

[[PTBR+16]*512 ]= [[PTBR+8]*512 +1];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
R14= [SP];
//breakpoint;

    //alias physicalAddrRetVal R6;
	//physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	//[physicalAddrRetVal] = 0;
ireturn;