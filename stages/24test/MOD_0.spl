alias functionNum R1;
alias currPid R2;


if(functionNum == ACQUIRE_BUFFER) then
    alias buffer_idx R3;

    while([BUFFER_TABLE + 4*buffer_idx + 2] != -1) do           //LOCKING_PID
        [PROCESS_TABLE + 16*currPid + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + 16*currPid + 5] = buffer_idx;
        backup;
        call SCHEDULER;
        restore;
    endwhile;

    [BUFFER_TABLE + 4*buffer_idx + 2] = currPid;
    return;
endif;


if(functionNum == RELEASE_BUFFER) then
    alias buffer_idx R3;

    if([BUFFER_TABLE + 4*buffer_idx + 2] != currPid) then       //LOCKING_PID
        R0 = -1;
        return;
    endif;

    [BUFFER_TABLE + 4*buffer_idx + 2] = -1;

    alias i R4;
    i = 0;

    alias process_table R5;

    while(i < 16) do
        process_table = PROCESS_TABLE + i*16;

        if([process_table + 4] == WAIT_BUFFER && [process_table + 5] == buffer_idx) then
            [process_table + 4] = READY;
        endif;
        i = i + 1;
    endwhile;

    R0 = 0;
    return;
endif;


if(functionNum == ACQUIRE_INODE) then
    alias index R3;

    while([FILE_STATUS_TABLE + 4*index + 0] != -1) do           //LOCKING_PID
        [PROCESS_TABLE + 16*currPid + 4] = WAIT_FILE;
        [PROCESS_TABLE + 16*currPid + 5] = index;

        backup;
        call SCHEDULER;
        restore;
    endwhile;

    //checking for if File was deleted by other process by the time the inode was acquired

    if([INODE_TABLE + 16*index + 1] == -1) then                //FILE_NAME
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + 4*index + 0] = currPid;               //LOCKING_PID

    R0 = 0;
    return;

endif;


if(functionNum == RELEASE_INODE) then
    alias index R3;

    if([FILE_STATUS_TABLE + index*4 + 0] != currPid) then           //LOCKING_PID
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + index*4 + 0] = -1;

    alias i R4;
    i = 0;

    while(i < 16) do
        if([PROCESS_TABLE + i*16 + 4] == WAIT_FILE && [PROCESS_TABLE + i*16 + 5] == index) then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
        i = i + 1;
    endwhile;

    R0 = 0;
    return;
endif;


if(functionNum == ACQUIRE_SEMAPHORE) then

    alias i R3;
    i = 0;

    while(i < MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE + i*4 + 1] == 0) then       //PROCESS_COUNT
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == MAX_SEM_COUNT) then
        R0 = -1;
        return;
    endif;

    R0 = i;
    [SEMAPHORE_TABLE + i*4] = -1;       //LOCKING_PID
    [SEMAPHORE_TABLE + i*4 + 1] = 1;    //PROCESS_COUNT
    return;
endif;


if(functionNum == RELEASE_SEMAPHORE) then
    alias semaphore_id R3;
    if([SEMAPHORE_TABLE + 4*semaphore_id] == currPid) then          //LOCKING_PID
        [SEMAPHORE_TABLE + 4*semaphore_id] = -1;
        alias i R4;
        i = 0;
        while(i < 16) do
            if([PROCESS_TABLE + 16*i + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16*i + 5] == semaphore_id) then
                [PROCESS_TABLE + 16*i + 4] = READY;
            endif;
        i = i + 1;
        endwhile;
    endif;

	[SEMAPHORE_TABLE + 4*semaphore_id+1] = [SEMAPHORE_TABLE + 4*semaphore_id + 1] - 1;    //PROCESS_COUNT

    return;

endif;


if(functionNum==ACQUIRE_DISK) then

    while([DISK_STATUS_TABLE]==1) do

        [PROCESS_TABLE+16*currPid+4] = WAIT_DISK;
        backup;
        call SCHEDULER;
        restore;

    endwhile;

    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE+4] = currPid;

    return;
endif;


if(functionNum == ACQUIRE_TERMINAL) then
    while([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + 16*currPid + 4] = WAIT_TERMINAL;
        
        backup;
        call SCHEDULER;
        restore;

    endwhile;

    [TERMINAL_STATUS_TABLE] = 1;	            //Status
    [TERMINAL_STATUS_TABLE + 1] = currPid;

    return;
endif;


if(functionNum == RELEASE_TERMINAL) then

    alias ret R0;
    if(currPid != [TERMINAL_STATUS_TABLE + 1]) then
        ret = -1;
        return;
    endif;

    [TERMINAL_STATUS_TABLE] = 0;
    alias i R5;
    i=0;
    while(i < 16) do
        if([PROCESS_TABLE + 16*i + 4] == WAIT_TERMINAL) then
            [PROCESS_TABLE + 16*i + 4] = READY;
            endif;
        i = i + 1;
    endwhile;

    ret = 0;

    return;
endif;

