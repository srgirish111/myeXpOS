alias functionNum R1;
alias currentPID R2;

if( functionNum==GET_PCB_ENTRY ) then
     alias cntr R4;
     cntr= 0;
     while( cntr<16 ) do
         if( [PROCESS_TABLE + 16*cntr +4] == TERMINATED ) then
          [PROCESS_TABLE + 16*cntr + 1] =cntr;
          [PROCESS_TABLE + 16*cntr +4]= ALLOCATED;
          R0= cntr;
          [PROCESS_TABLE + 16*cntr +14] =PAGE_TABLE_BASE + cntr*20;
          [PROCESS_TABLE + 16*cntr +15] =10 ;
          return;
         endif ;
         cntr = cntr +1;
     endwhile ;
     R0 =-1;
     return;
endif ;

if( functionNum==FREE_USER_AREA_PAGE ) then
     alias pre_proc_table R5;
     alias cur_pcb_entry R6;
     cur_pcb_entry = PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16;
     pre_proc_table =([cur_pcb_entry +11]*512) +512 - 16;
     alias i R7;
     i=0;
     while(i<8) do
          if([pre_proc_table +i*2]==SEMAPHORE) then
          multipush(R3,R4,R5,R6,R7);
          R1=RELEASE_SEMAPHORE;
          R2=[pre_proc_table +i*2 +1];
          R3=[SYSTEM_STATUS_TABLE+1];
          call MOD_0;
          multipop(R3,R4,R5,R6,R7);
          endif;

          if([pre_proc_table +i*2]==FILE) then
          multipush(R3,R4,R5,R6,R7);
          R1=CLOSE;
          R2=[pre_proc_table +i*2 +1];
          R3=[SYSTEM_STATUS_TABLE+1];
          call MOD_3;
          multipop(R3,R4,R5,R6,R7);
          endif;

          i=i+1;
     endwhile;
     alias usrarpage R3;
     usrarpage = [cur_pcb_entry +11];
     multipush(R1,R2,R3);
     R1= RELEASE_PAGE;
     R2=R3;
     call MEMORY_MANAGER;
     multipop(R1,R2,R3);
     return;
endif ;

if( functionNum==EXIT_PROCESS ) then
    if( [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] != 9 ) then
          alias cntr R5;
          alias proc_entry R6;
          cntr=0;
          while( cntr<MAX_PROC_NUM ) do
               proc_entry = PROCESS_TABLE + 16*cntr;
               if(([proc_entry + 4]==WAIT_PROCESS) && ([proc_entry+5] == [SYSTEM_STATUS_TABLE+1])) then
                    //breakpoint;
                    [proc_entry+4] =READY;
               endif;
              if( [SYSTEM_STATUS_TABLE+1] == [proc_entry+2] ) then
               [proc_entry+2] = -1;
              endif ;
               cntr =cntr+1;
          endwhile;
    endif ;
     multipush(R1,R2,R3);
     R1= FREE_PAGE_TABLE;
     R2=currentPID;
     call PROCESS_MANAGER;
     multipop(R1,R2,R3);

     multipush(R1,R2,R3);
     R1= FREE_USER_AREA_PAGE;
     R2=currentPID;
     call PROCESS_MANAGER;
     multipop(R1,R2,R3);

     [PROCESS_TABLE + 16*currentPID +4] =TERMINATED;
     return;
endif ;

if( functionNum ==FREE_PAGE_TABLE ) then
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";

    alias counter R1;


     counter =0;
     while( counter <20 ) do
       if( [PTBR + counter]!=-1 ) then
            R2=[PTBR+counter];
            multipush(R1,R2,R3);
            R1= RELEASE_PAGE;
            call MEMORY_MANAGER;
            multipop(R1,R2,R3);
            [PTBR + counter] =-1;
            [PTBR + counter +1]="0000";
       endif ;
        counter =counter+2;
     endwhile;

     counter =0;
     alias diskmaptab R4;
     diskmaptab =DISK_MAP_TABLE+2+ 10*[SYSTEM_STATUS_TABLE+1] ;
     while(counter<8 ) do
          if( 2<=counter && counter<=5) then
               [diskmaptab] =-1;
               diskmaptab =diskmaptab+1;
               counter= counter+1;
               continue;
          endif ;
          if( [diskmaptab]!=-1 ) then
               multipush(R1,R4);
               R1=RELEASE_BLOCK;
               R2=[diskmaptab];
               R3=[SYSTEM_STATUS_TABLE+1];
               call MEMORY_MANAGER;
               multipop(R1,R4);
          endif;
          [diskmaptab] =-1;
          diskmaptab =diskmaptab+1;
          counter= counter+1;
     endwhile ;
    return;
endif ;


return;