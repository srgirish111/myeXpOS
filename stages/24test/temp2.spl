alias func_num R1;


//-------------------------------------OPEN FUNC-------------------------------------

// RETURN file_table_index
// RETURN -1 if not in INODE table || LOCKING fail || file is EXEC 
// RETURN -2 if system is reached maximum number of open files

if(func_num == OPEN) then
    alias filename R2;

    alias i R3;
    i = 0;

    while(i < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*i + 1] == filename) then
            break;
        endif;
        i = i + 1;
    endwhile;

    //entry not found

    if(i == MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    alias inode_idx R4;
    inode_idx = i;

    multipush(R1,R2,R3,R4);
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inode_idx;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    if(R0 == -1) then
        return;
    endif;

    if([INODE_TABLE + 16*inode_idx + 0] == EXEC) then
        multipush(R1,R2,R3,R4);
        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_idx;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4);

        R0 = -1;
        return;
    endif;

	// SEARCH FOR OPEN FILE TABLE ENTRY IN OPEN FILE TABLE

    i = 0;
    while(i < MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE + 4*i] == -1) then
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == MAX_OPENFILE_NUM) then
        multipush(R1,R2,R3,R4);
        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_idx;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4);

        R0 = -2;
        return;
    endif;

    alias open_file_entry R5;
    open_file_entry = i;

    if(filename == "root") then
        [OPEN_FILE_TABLE + open_file_entry*4] = INODE_ROOT;          //INODE_INDEX
    else
        [OPEN_FILE_TABLE + open_file_entry*4] = inode_idx;

        //INC in FILE_OPEN_COUNT

        //if open for first time
        if([FILE_STATUS_TABLE + inode_idx*4 + 1] == -1) then         //FILE_OPEN_COUNT
            [FILE_STATUS_TABLE + inode_idx*4 + 1] = 1;
        else
            [FILE_STATUS_TABLE + inode_idx*4 + 1] = [FILE_STATUS_TABLE + inode_idx*4 + 1] + 1;
        endif;   
    endif;

    [OPEN_FILE_TABLE + open_file_entry*4 + 1] = 1;                  //OPEN_INSTANCE_COUNT
    [OPEN_FILE_TABLE + open_file_entry*4 + 2] = 0;                  //LSEEK

    multipush(R1,R2,R3,R4,R5);
    R1 = RELEASE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inode_idx;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);

    R0 = open_file_entry;
    return;

endif;

//-------------------------------------CLOSE FUNC------------------------------------

if(func_num == CLOSE) then
    alias open_file_entry R2;

    alias open_file_table R3;
    open_file_table = OPEN_FILE_TABLE + 4*open_file_entry;

    alias inode_idx R4;
    inode_idx = [open_file_table + 0];

    alias file_status_table R5;
    file_status_table = FILE_STATUS_TABLE + 4*inode_idx;

    [open_file_table + 1] = [open_file_table + 1] -1;           //OPEN_INSTANCE_COUNT

    if([open_file_table + 1] == 0) then
        [open_file_table + 0] = -1;                             //INODE_INDEX
        [open_file_table + 1] = -1;                             //OPEN_INSTANCE_COUNT
        [open_file_table + 2] = -1;                             //LSEEK

        if(inode_idx != INODE_ROOT) then
            [file_status_table + 1] = [file_status_table + 1] - 1;                                      //FILE_OPEN_COUNT
        endif;

        if([file_status_table + 1] == 0) then
            [file_status_table + 1] = -1;
        endif;
    endif;

    return;
endif;

//-----------------------------------BUFFERED_READ-----------------------------------

if(func_num == BUFFERED_READ) then
    alias block_num R2;
    alias offset R3;
    alias physical_adr R4;

    alias buffer_idx R5;
    buffer_idx = block_num%4;

    alias buffer_table R6;
    buffer_table = BUFFER_TABLE + 4*buffer_idx;

    // ACQUIRE_BUFFER

    multipush(R1,R2,R3,R4,R5,R6);
    R1 = ACQUIRE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffer_idx;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6);

    // IF THE BUFFER CONTAIN A DIFFERENT DISK BLOCK

    if([buffer_table + 0] != block_num) then            //BLOCK_NUMBER

        //If the DIRTY_BIT is set
        if([buffer_table + 1] == 1) then

            multipush(R1,R2,R3,R4,R5,R6);
            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = buffer_idx + 71;                       //PAGE_NUMBER
            R4 = [buffer_table + 0];                    //BLOCK_NUMBER
            call DEVICE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6);

            [buffer_table + 1] = 0;                    //CLEAN DIRTY_BIT
        endif;

		// LOAD THE REQUIRED DISK BUFFER
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = DISK_LOAD;
        R4 = block_num;                             //BLOCK_NUMBER
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = buffer_idx + 71;                       //PAGE_NUMBER
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6);

        [buffer_table + 0] = block_num;
    endif;

    [physical_adr] = [(buffer_idx + 71)*512 + offset];

    // RELEASE_BUFFER
    multipush(R1,R2,R3,R4,R5,R6);
    R1 = RELEASE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffer_idx;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6);

    return;
endif;